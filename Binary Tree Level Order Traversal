Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).
给定一个二叉树，返回节点值的层序遍历结果
For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]

#Definition for a binary tree node.
#class TreeNode:
#    def __init__(self, x):
#        self.val = x
#        self.left = None
#        self.right = None

class Solution;
    def levelOrder(self, root):
        """
        :type root:TreeNode
        :rtype: List[List[int]]
        """
        res = []
        if root == None:
            return res
            
        q = [root]    
        while len(q) != 0:
            res.append([node.val for node in q])
            new_q = []
            for node in q:
                if node.left:
                    new_q.append(node.left)
                if node.right:
                    new_q.append(node.right)
            q = new_q
        
        return res
        
        
#Definition for a binary tree node.
#class TreeNode:
#    def __init__(self, x):
#        self.val = x
#        self.left = None
#        self.right = None

class Solution;
    def levelOrder(self, root):
        """
        :type root:TreeNode
        :rtype: List[List[int]]
        """
        res = []
        self.dfs(root, 0, res)
        return res
    
    def dfs(self, root, depth, res):
        if root == None:
            return res
        if len(res) < depth + 1:
            res.append([])
        res[depth].append(root.val)
        self.dfs(root.left, depth+1, res)
        self.def(root.right, depth+1, res)
        
        
        
        
        
        
        
        
