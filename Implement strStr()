Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.
返回haystack中的needle出现的第一个索引，如果needle不是haystack的一部分返回-1
Example 1:例1
Input: haystack = "hello", needle = "ll"
Output: 2

Example 2:例2
Input: haystack = "aaaaa", needle = "bba"
Output: -1



从i=0出发，如果haystack[i] == needle[0]，那么判断从这个字符开始能不能构成needle，如果可以则返回i。
直到i到最后一个字符的长度小于needle的长度。如果前面没有返回值，那么返回-1.时间复杂度是（O（(m - n) * n)).
class Solution:
    def strStr(self, haystack, needle):
        """
        :type haystack: str
        :type needle: str
        :rtype: int
        """
         size1 = len(haystack)
         size2 = len(needle)
         if size2 == 0:
             return 0
         if size1 < size2:
             return -1
         i = 0
         while i < size1:
             if size1 - i < size2:
                 return -1
             if haystack[i] = needle[0]
                 j = 1
                 while j < size2:
                     if haystack[i + j] != needle[j]
                         break
                     j += 1
                 if j == size2:
                     return i
             i += 1
         return -1
     
     
