Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.
给定一个数组，写一个函数来把所有的0 都移动到最后，但保持原来的非零元素的位置不同
For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].
例如，给定数组nums=[0,1,0,3,12],在调用你的函数后，nums=[1,3,12,0,0]
Note:
You must do this in-place without making a copy of the array.你不应该复制数组，应该直接处理
Minimize the total number of operations.减少操作的数字
Credits:
Special thanks to @jianchao.li.fighter for adding this problem and creating all test cases.

解法：先将所有的非零数移动到前面，再一次性将后面所有数置为0
class Solution:
    def moveZeroes(self, nums):
        """
        :type nums: List[int]
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        i = 0
        for num in nums:
            if num != 0:
                nums[i] = num
                i += 1
        for j in range(i, len(nums)):
            nums[j] = 0

解法2：从后向前搜索，把找到的0都移动到最后，即，将找到的0后面的非零书向前移动
class Solution(object):
    def moveZeroes(self, nums):
        """
        :type nums: List[int]
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        for i in range(len(nums)-1, -1, -1):
            if nums[i] == 0:
                for j in range(i+1, len(nums)):
                    if nums[j] != 0:
                        nums[j-1] = nums[j]
                        nums[j] = 0
                        
解法3：用自带的sort函数，但不确定sort函数会不会申请临时数组
class Solution(object):
    def moveZeroes(self, nums):
        """
        :type nums: List[int]
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        nums.sort(key = lambda x: 1 if x == 0 else 0)                        
