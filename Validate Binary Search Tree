Given a binary tree, determine if it is a valid binary search tree (BST).
给定一个二叉树，确定他是不是一个有效的二叉搜索树（BST）
Assume a BST is defined as follows:
假定一个BST如下定义：
The left subtree of a node contains only nodes with keys less than the node's key.
节点左边的子树只包含值小于节点值的节点。
The right subtree of a node contains only nodes with keys greater than the node's key.
节点右边的子树只包含值大于节点值的节点。
Both the left and right subtrees must also be binary search trees.
所有的左边和右边的子树都必须是二叉树
Example 1:例1：
    2
   / \
  1   3
Binary tree [2,1,3], return true.返回 真。
Example 2:例2
    1
   / \
  2   3
Binary tree [1,2,3], return false.返回 假。

#Definition for a binary tree node.
#class TreeNode:
#    def __init__(self, x):
#        self.val = x
#        self.left = None
#        Self.right = None

class Solution:
    pre = None
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        if root is None:
            return True
        Bool = self.isValidBST(root.left)
        
        if self.pre != None:
            Bool = Bool and (self.pre.val<root.val)
        
        self.pre = root
        
        Bool = Bool and self.isValidBST(root.right)
        return Bool
        
        
