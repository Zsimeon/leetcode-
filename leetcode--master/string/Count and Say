The count-and-say sequence is the sequence of integers with the first five terms as following:
count-and-say 序列是前五项如下的整数序列：
1.     1
2.     11
3.     21
4.     1211
5.     111221
1 is read off as "one 1" or 11.
11 is read off as "two 1s" or 21.
21 is read off as "one 2, then one 1" or 1211.
Given an integer n, generate the nth term of the count-and-say sequence.
给你一个整数n，生成第n项
Note: Each term of the sequence of integers will be represented as a string.
注意：每一个整数序列会被表示为一个字符串
Example 1:

Input: 1
Output: "1"
Example 2:

Input: 4
Output: "1211"

class Solution:
    def countAndSay(self, n):
        """
        :type n: int
        :rtype: str
        """
        ans = '1'
        while n > 1:
            ans = self.countStr(ans)
            n -= 1
        return  ans
    
    def countStr(self, s):
        count = 0; ans = "";tmp = s[0]
        for i in range(len(s)):
            if s[i] == tmp:
                count += 1
            else:
                ans += str(count) + tmp
                tmp = s[i]; count = 1
        ans += str(count) + tmp
        return ans


SL = Solution()
a = SL.countAndSay(7)
print(a)
a = 13112221

SL = Solution()
a = SL.countAndSay(6)
print(a)
a = 312211



class Solution:
    def countAndSay(self, n):
        """
        :type n: int
        :rtype: str
        """
        seq = ['1']
        top = 1
        while n - 1 > 0:
            n -= 1
            index = 0
            bak = []
            i = 0
            while i < top:
                num = 1
                while i + 1 < top and seq[i + 1] == seq[i]: i += 1; num += 1 
                bak.append(chr(num + ord('0')))
                i += 1
            seq = bak; top = len(bak)
        return ''.join(seq)
